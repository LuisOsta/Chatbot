{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["initialValues","author","type","data","text","loadingValue","popper","array","pop","App","useState","name","setName","isOpen","setOpen","messageList","setMessageList","handleMessageSent","message","a","currentList","axios","post","headers","className","src","logo","alt","agentProfile","teamName","imageUrl","onMessageWasSent","showEmoji","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAAe,MAA0B,iCCMnCA,G,MAAgB,CACpB,CACEC,OAAQ,OACRC,KAAM,OACNC,KAAM,CACJC,KACE,wEAGN,CACEH,OAAQ,OACRC,KAAM,OACNC,KAAM,CACJC,KAAM,iCAKNC,EAAe,CACnBJ,OAAQ,OACRC,KAAM,OACNC,KAAM,CACJC,KAAM,gBAYJE,EAAS,WAAiB,IAAhBC,EAAe,uDAAP,GAEtB,OADAA,EAAMC,MACCD,GA2DME,MAxDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,oBAAS,GAFtB,mBAENG,EAFM,KAEEC,EAFF,OAGyBJ,mBAASV,GAHlC,mBAGNe,EAHM,KAGOC,EAHP,KASPC,EAAiB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACxBH,GAAe,SAACI,GAAD,4BAAqBA,GAArB,CAAkCF,EAASb,OADlC,SAEDgB,IAAMC,KAAK,oBAAqB,CACrDnB,KAAM,CAAEC,KAAMc,EAAQf,KAAKC,KAAMO,QACjCY,QAAS,CACP,eAAgB,sBALI,gBAEhBpB,EAFgB,EAEhBA,KAORa,GAAe,SAACI,GAAD,4BACVd,EAAOc,IADG,CAEb,CACEnB,OAAQ,OACRC,KAAM,OACNC,KAAM,CACJC,KAAMD,EAAKC,YAIjBQ,EAAQT,EAAKQ,MAnBW,2CAAH,sDAqBvB,OACE,sBAAKa,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,WAE3C,8BACE,qBAAKH,UAAU,WAAf,SACE,cAAC,IAAD,CACEI,aAAc,CACZC,SAAU,iBACVC,SACE,mEAEJC,iBAAkBd,EAClBF,YAAaA,EACbiB,WAAW,EACXnB,OAAQA,EACRoB,YA1CS,WACjBnB,GAASD,IA0CDW,UAAU,qBCjFPU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.13dedac6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import { useState } from \"react\";\nimport { Launcher } from \"react-chat-window\";\nimport axios from \"axios\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst initialValues = [\n  {\n    author: \"Them\",\n    type: \"text\",\n    data: {\n      text:\n        \"Welcome! Here you can ask whatever questions you want about finance\",\n    },\n  },\n  {\n    author: \"Them\",\n    type: \"text\",\n    data: {\n      text: \"Ask any question you want.\",\n    },\n  },\n];\n\nconst loadingValue = {\n  author: \"Them\",\n  type: \"text\",\n  data: {\n    text: \"Thinking...\",\n  },\n};\n\nconst askForName = {\n  author: \"Them\",\n  type: \"text\",\n  data: {\n    text: \"What's your  name?\",\n  },\n};\n\nconst popper = (array = []) => {\n  array.pop();\n  return array;\n};\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [isOpen, setOpen] = useState(true);\n  const [messageList, setMessageList] = useState(initialValues);\n\n  const handleOpen = () => {\n    setOpen(!isOpen);\n  };\n\n  const handleMessageSent = async (message) => {\n    setMessageList((currentList) => [...currentList, message, loadingValue]);\n    const { data } = await axios.post(\"/chatbot/response\", {\n      data: { text: message.data.text, name },\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    });\n\n    setMessageList((currentList) => [\n      ...popper(currentList),\n      {\n        author: \"Them\",\n        type: \"text\",\n        data: {\n          text: data.text,\n        },\n      },\n    ]);\n    setName(data.name);\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div>\n        <div className=\"launcher\">\n          <Launcher\n            agentProfile={{\n              teamName: \"CS4395 Chatbot\",\n              imageUrl:\n                \"https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png\",\n            }}\n            onMessageWasSent={handleMessageSent}\n            messageList={messageList}\n            showEmoji={false}\n            isOpen={isOpen}\n            handleClick={handleOpen}\n            className=\"launcher\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}